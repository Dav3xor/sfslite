#!/usr/bin/perl
use strict;

##
## This is a script that autogerates the file mkevent.h -- the header file
## of tame autogenerated template classes.
##

my $N_tv = 3;
my $N_wv = 3;
my $name = "_mkevent";
my $CN = "event";
my $WCN = "event_t";

sub mklist ($$)
{
    my ($tmplt, $n) = @_;
    my @out;
    for (my $i = 1; $i <= $n; $i++) {
	my $a = $tmplt;
	$a =~ s/%/$i/g;
	push @out, $a;
    }
    return @out
}

sub mklist_multi (@)
{
    my @arr;
    foreach my $e (@_) {
	if (ref ($e)) {
	    push @arr, mklist ($e->[0], $e->[1]);
	} else {
	    push @arr, $e;
	}
    }
    return @arr;
}

sub commafy {
    return join (", " , @_);
}

sub arglist (@)
{
    return commafy (mklist_multi (@_));
}

sub template_arglist (@)
{
    my $al = arglist (@_);
    if (length ($al) > 0) {
	return "<" . $al . ">";
    } else {
	return "";
    }
}

sub do_trigger_func ($$$)
{
    my ($fn, $arg1, $t) = @_;

    print ("  void $fn (",
	   arglist (["T% t%", $t]), ")",
	   " { dotrig (",
	   arglist ($arg1, ["t%", $t], ["nil_t()", $N_tv - $t]),
	   " ); }\n");
}

#
# make a class of type event, the inherits from libasync's callback,
# for each number of trigger values.
#
sub do_event_class ($)
{
    my ($t) = @_;
    my ($tlist, $tlist2);

    print ("template<", arglist (["class T%", $t]), ">\n");
    $tlist = "<" . arglist (["T%", $t]) . ">";
    $tlist2 = $tlist;

    my $vlist = "<" . arglist ("void", ["T%", $t]) . ">";

    # print the classname
    print ("class event", $tlist, " :\n",
	   "     public event_base_t", $tlist2, ",\n",
	   "     public callback", $vlist , "\n",
	   "{\n",
	   "public:\n");

    # print the constructor
    print ("  event (",
	   arglist ("event_action_ptr_t a",
		    "refset_t$tlist2 rs",
		    "const char *loc"),
	   ")\n",
	   "    : event_base_t" , $tlist2 , " (a, rs, loc),\n",
	   "      callback", $vlist, 
	   " (CALLBACK_ARGS(loc))\n",
	   "     {}\n");

    # print the trigger functions
    do_trigger_func ("operator()", "true", $t);
    do_trigger_func ("trigger", "false", $t);
    
    # close the class
    print "};\n\n";
}

sub do_mkevent_generic ($$)
{
    my ($t, $w) = @_;
    my $tn;
    if ($t > 0 || $w > 0) {
	print ("template<" , arglist (["class W%", $w], ["class T%", $t]) , 
	       ">\n");
	$tn = "typename";
    } else {
	$tn = "";
    }
    my $ret = "$tn ${WCN}<". arglist (["T%", $t]) . ">::ref";

    
    print ("$ret\n",
	   "${name} (" , 
	   arglist ("ptr<closure_t> c",
		    "const char *loc",
		    "rendezvous_t<" . arglist (["W%", $w]) . "> rv",
		    ["const W% &w%", $w],
		    ["T% &t%", $t]
		    ),
	   ")\n"
	   );
    if ($t > 0 || $w > 0) {
	print "{\n";
	my @args = ("c", 
		    "loc",
		    "value_set_t<" . arglist (["W%", $w]) . "> (" .
		    arglist (["w%", $w]) . ")",
		    "refset_t<" . arglist (["T%", $t]) . "> (" .
		    arglist (["t%", $t]) . ")",
		    );
	print ("  return rv._mkevent (" ,
	       join (",\n                      ", @args),
	       ");\n",
	       "}\n\n");
    } else {
	print ";\n\n";
    }
}
    
sub do_generic ($$)
{
    my ($t, $w) = @_;
    do_mkevent_generic ($t, $w);
}


sub do_mkevent_block ($)
{
    my ($t) = @_;
    if ($t > 0) {
	print "template<" . arglist (["class T%", $t]) . ">\n";
	print "typename ";
    }
    print "${WCN}<" . arglist (["T%", $t]) . ">::ref\n";
    print ("${name} (" ,
	   arglist ("implicit_rendezvous_t *r",
		    "const char *loc",
		    [ "T% &t%", $t ]),
	   ")\n");
    if ($t > 0) {
	print "{\n";
	print ("  return New refcounted<${CN}<" .
	       arglist (["T%", $t]) . "> >\n" .
	       "   (",
	       arglist ( "r->make_reenter (loc)",
			 "refset_t<" . arglist (["T%", $t]) 
			 ."> (" . arglist (["t%", $t]) . ")",
			 "loc"
			 ),
	       ");\n");
	print "}\n\n";
    } else {
	print ";\n\n";
    }
}

sub do_block ($)
{
    my ($t) = @_;
    do_mkevent_block ($t);
}

print <<EOF;
// -*-c++-*-
//
// Autogenerated by mkevent.pl
//

#ifndef _LIBTAME_EVENT_AG_H_
#define _LIBTAME_EVENT_AG_H_

#include "tame_event.h"
#include "tame_core.h"


EOF

for (my $t = 0; $t <= $N_tv; $t++) {
    do_event_class ($t);
    do_block ($t);
    for (my $w = 0; $w <= $N_wv; $w++) {
	do_generic ($t, $w);
    }
}


print <<EOF;
#endif // _LIBTAME_EVENT_AG_H_ 
EOF
