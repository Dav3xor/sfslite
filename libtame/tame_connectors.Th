
// -*-c++-*-
/* $Id: tame.h 2077 2006-07-07 18:24:23Z max $ */

#ifndef _LIBTAME_CONNECTORS_H_
#define _LIBTAME_CONNECTORS_H_

#include "tame.h"


template<class T1=nil_t, class T2=nil_t, class T3=nil_t>
class connector {
public:

  connector () {}

  static typename event_t<T1,T2,T3>::ptr
  cnc (cancelable_t *cnc, typename event_t<T1,T2,T3>::ref in, bool *res = NULL)
  {
    typename event_t<T1,T2,T3>::ptr  ncb;
    connector<T1,T2,T3> c;
    c.__cnc (&ncb, cnc, in, res);
    return ncb;
  }

private:
  void __cnc (typename event_t<T1,T2,T3>::ptr *out, cancelable_t *cnc, 
	      typename event_t<T1,T2,T3>::ref in, 
	      bool *res, CLOSURE);
};


tamed template<class T1, class T2, class T3> void 
connector<T1,T2,T3>::__cnc (typename event_t<T1,T2,T3>::ptr *out, 
			    cancelable_t *cnc, 
			    typename event_t<T1,T2,T3>::ref in, bool *res)
{
  tvars {
    rendezvous_t<bool> rv (__FILE__, __LINE__);
    T1 t1;
    T2 t2;
    T3 t3;
    bool ok;
  }

  cnc->set_notify_on_cancel (mkevent (rv, false));
  *out = mkevent (rv, true, t1, t2, t3);
  twait (rv, ok);
  if (res) *res = ok;
  in->dotrig (t1, t2, t3);
  rv.cancel ();
}



#endif /* _LIBTAME_CONNECTORS_H_ */
